---
layout: ""
page_title: "dynatrace_automation_workflow Resource - terraform-provider-dynatrace"
subcategory: "Automation"
description: |-
  The resource `dynatrace_automation_workflow` covers configuration of Workflows
---

# dynatrace_automation_workflow (Resource)

-> This resource is excluded by default in the export utility. You can, of course, specify that resource explicitly in order to export it. In that case, don't forget to specify the environment variables `DYNATRACE_AUTOMATION_CLIENT_ID` and `DYNATRACE_AUTOMATION_CLIENT_SECRET` for authentication.

## Dynatrace Documentation

- Dynatrace Workflows - https://www.dynatrace.com/support/help/platform-modules/cloud-automation/workflows

## Prerequisites

Using this resource requires an OAuth client to be configured within your account settings.
The scopes of the OAuth Client need to include `View workflows (automation:workflows:read)` and `Create and edit workflows (automation:workflows:write)`.

Finally the provider configuration requires the credentials for that OAuth Client.
The configuration section of your provider needs to look like this.
```terraform
provider "dynatrace" {
  dt_env_url   = "https://########.live.dynatrace.com/"  
  dt_api_token = "######.########################.################################################################"  

  # Usually not required. Terraform will deduct it if `dt_env_url` has been specified
  # automation_env_url = "https://########.apps.dynatrace.com/" 
  automation_client_id = "######.########"
  automation_client_secret = "######.########.################################################################"  
}
```
-> In order to handle credentials in a secure manner we recommend to use the environment variables `DYNATRACE_AUTOMATION_CLIENT_ID` and `DYNATRACE_AUTOMATION_CLIENT_SECRET` as an alternative.

## Resource Example Usage

```terraform
resource "dynatrace_automation_workflow" "Sample_Worklow_TF" {
  description = "Desc"
  actor       = "703d65c0-4aff-45d9-8b34-2c6f5f17bb8e"
  title       = "Sample Worklow TF1"
  owner       = "703d65c0-4aff-45d9-8b34-2c6f5f17bb8e"
  private     = true
  tasks {
    task {
      name        = "http_request_1"
      description = "Issue an HTTP request to any API"
      action      = "dynatrace.automations:http-function"
      active      = true
      input = jsonencode({
        "method" : "GET",
        "url" : "https://www.google.at/"
      })
      position {
        x = 0
        y = 1
      }
    }
    task {
      name        = "http_request_2"
      description = "Issue an HTTP request to any API"
      action      = "dynatrace.automations:http-function"
      active      = false
      input = jsonencode({
        "method" : "GET",
        "url" : "https://www.second-task.com/"
      })
      conditions {
        states = {
          http_request_1   = "SUCCESS"
          run_javascript_1 = "OK"
        }
        custom = ""
      }
      position {
        x = -1
        y = 2
      }
      timeout = 50000
    }
    task {
      name        = "http_request_3"
      description = "Issue an HTTP request to any API"
      action      = "dynatrace.automations:http-function"
      active      = false
      input = jsonencode({
        "method" : "GET",
        "url" : "https://www.third-task.com"
      })
      conditions {
        states = {
          http_request_2 = "OK"
        }
        custom = "{{http_request_1}}"
      }
      position {
        x = 0
        y = 3
      }
    }
    task {
      name        = "run_javascript_1"
      description = "Build a custom task running js Code"
      action      = "dynatrace.automations:run-javascript"
      active      = false
      input = jsonencode({
        "script" : "// optional import of sdk modules\nimport { execution } from '@dynatrace-sdk/automation-utils';\n\nexport default async function ({ execution_id }) {\n  // your code goes here\n  // e.g. get the current execution\n  const ex = await execution(execution_id);\n  console.log('Automated script execution on behalf of', ex.trigger);\n  \n  return { triggeredBy: ex.trigger };\n}"
      })
      position {
        x = -2
        y = 1
      }
    }
  }
  trigger {
    event {
      active = false
      config {
        davis_event {
          entity_tags_match = "all"
          entity_tags = {
            asdf = ""
          }
          on_problem_close = false
          types            = ["CUSTOM_ANNOTATION"]
        }
      }
    }
  }
}
```

{{ .SchemaMarkdown | trimspace }}
